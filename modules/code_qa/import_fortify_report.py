import re
import os
from galvatron_lib.core.module import BaseModule

class Module(BaseModule):
    meta = {
            "name": "Import Fortify Report",
            "author": "Mike West",
            "descrription": "Imports text file reports generated by fortify",
            "options": [
                ["report_file", "/tmp/report.txt", True, 'absolute path to the report file to import'],
                ["product_name", None, True, 'product to import the report for (from targets table)']
            ]
    }

    def module_run(self):
        self.output("Importing %s" % self.options['report_file'])

        # I know, I know SQL Injection blah, blah, blah
        product_name, version, extracted_location = self.query("SELECT product_name, version, extracted_location FROM targets where product_name = '%s'" % self.options['product_name'])[0]

        with open(self.options['report_file'], "r") as f:
            t = re.split("(?m)^$\n", f.read())

        content = t[2:]
        base_path = t[1].split(os.path.basename(extracted_location))[1].rstrip().rstrip("]").lstrip("/")

        for x in content:
            tmp = x.split("\n")
            note = " : ".join(tmp[0].split(":")[2:]).rstrip("]")

            result = re.search("^(.*)\((\d+)\)", tmp[1])
            file_name, line_number = result.groups()
            relative_path = "%s/%s" % (base_path, file_name)

            line = self.get_line(extracted_location, relative_path, line_number)

#            self.add_qa_issue(product_name, version, os.path.basename(file_name), os.path.dirname(file_name), line_number, line, note)

    def get_line(self, base, file_name, line_no):
        file_location = os.path.join(base, file_name)
        self.output("Getting line for: %s (%s)" % (file_location, line_no))

        with open(file_location, "r") as f:
            for i, line in enumerate(f):
                if i == (int(line_no) - 1):
                    return line

